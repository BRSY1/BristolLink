// 1. Add "EMAIL_HOST_PASSWORD=<xxx>" in a .env file
// 2. Download REST Client extension in VSCode to run the test
// 3. Run the django server by "python manage.py runserver"

// Test register
// An verification email will be sent to the email address
POST http://127.0.0.1:8000/api/register
Content-Type: application/json

{ "username": "tom", "password": "tom123", "email": "ye24597@bristol.ac.uk" }

###

// Test email verification
// Just copy the link from the email and paste it to the browser instead
// A token will be returned which is used for the following requests
GET http://127.0.0.1:8000/api/verify/...
Content-Type: application/json

###

// Test login
// Don't have to login after finish registering
// A token will be returned which is used for the following requests
POST http://127.0.0.1:8000/api/login
Content-Type: application/json

{ "email": "ye24597@bristol.ac.uk", "password": "tom123" }

###

// Test submit crush
// Add token to the header
// Optional argument: Add an image to your crush
POST http://127.0.0.1:8000/api/crush/submit
Content-Type: application/json
Authorization: token <xxx>

{ 
    "crush_name": "ye24597@bristol.ac.uk", 
    "crush_email": "ye24597@bristol.ac.uk",
    "message": "I love you"
}

###

// Test get crush
// Add token to the header
// The crush will be returned if the crush_name is the same as the email address
GET http://127.0.0.1:8000/api/crush/get
Content-Type: application/json
Authorization: token <xxx>

###

// Test logout
// The token will be invalid after logout
POST http://127.0.0.1:8000/api/logout
Content-Type: application/json
Authorization: token <xxx>

{ "email": "ye24597@bristol.ac.uk", "password": "tom123" }

